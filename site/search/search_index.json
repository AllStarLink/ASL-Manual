{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ASL3 AllStarLink\u2019s app_rpt version 3 is the next generation of repeater and hotspot software. This version of app_rpt has been redesigned to run on the Long Term Support version of Asterisk\u00ae, the latest operating systems, and modern hardware. In other words, ASL3 now runs on Asterisk 20, Debian 12, Raspberry Pi's, amd64, x86, and virtual hosts. The update from Asterisk version 1.4 to version 20 implements over 15 years of bug fixes, security improvements and enhancements to the core asterisk application. This update required app_rpt to be heavily modified to run on the latest version of Asterisk\u00ae. It brings with it the latest Asterisk\u00ae applications, channel drivers and other functionality. As part of this update, app_rpt has been refactored to make the code base easier to maintain and enhance. This process has been going on for over two years and will continue. The app_rpt code base will meet all current Asterisk\u00ae coding guidelines. New Features ASL3 runs on Asterisk 20 and Debian 12. HTTP AllStarLink registration DNS IP address resolution with fallback to file Memory leaks addressed All modules reload or refresh Improved uptime USB improvements ASL menu improvements tune-menu improvements EchoLink improvements Per node access lists rpt.conf improvements Asterisk runs as non-root Compile directives for more architectures","title":"Home"},{"location":"#welcome-to-asl3","text":"AllStarLink\u2019s app_rpt version 3 is the next generation of repeater and hotspot software. This version of app_rpt has been redesigned to run on the Long Term Support version of Asterisk\u00ae, the latest operating systems, and modern hardware. In other words, ASL3 now runs on Asterisk 20, Debian 12, Raspberry Pi's, amd64, x86, and virtual hosts. The update from Asterisk version 1.4 to version 20 implements over 15 years of bug fixes, security improvements and enhancements to the core asterisk application. This update required app_rpt to be heavily modified to run on the latest version of Asterisk\u00ae. It brings with it the latest Asterisk\u00ae applications, channel drivers and other functionality. As part of this update, app_rpt has been refactored to make the code base easier to maintain and enhance. This process has been going on for over two years and will continue. The app_rpt code base will meet all current Asterisk\u00ae coding guidelines.","title":"Welcome to ASL3"},{"location":"#new-features","text":"ASL3 runs on Asterisk 20 and Debian 12. HTTP AllStarLink registration DNS IP address resolution with fallback to file Memory leaks addressed All modules reload or refresh Improved uptime USB improvements ASL menu improvements tune-menu improvements EchoLink improvements Per node access lists rpt.conf improvements Asterisk runs as non-root Compile directives for more architectures","title":"New Features"},{"location":"developers/package-builds/","text":"test Because Asterisk runs a non-root consider: RTCM configs: We are recommending the use of port 1667 to avoid OS hacks for ports below 1024. USB configs require a udev rule: cat /etc/udev/rules.d.90-asl3.rules SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0d8c\", GROUP=\"plugdev\", TAG+=\"uaccess\" Version Taxonomy ASL3 has adopted a new version format for individual packages related to Asterisk and the app_rpt-associated code. That format is: {ASTERISK_VERSION}+asl3-{APP_RPT_VERSION}-{PKG_RELEASE} The string ASTERISK_VERSION is the base version of Asterisk (e.g. 20.7.0). The string APP_RPT_VERSION is the version of apt_rpt and associated code, starting from 1 at the epoch of beginning packaging building. The string PKG_RELEASE is a Debian package-related package version. This will appear in the output of the asterisk -rv command and otherwise as necessary.","title":"Package Builds"},{"location":"developers/package-builds/#test","text":"Because Asterisk runs a non-root consider: RTCM configs: We are recommending the use of port 1667 to avoid OS hacks for ports below 1024. USB configs require a udev rule: cat /etc/udev/rules.d.90-asl3.rules SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0d8c\", GROUP=\"plugdev\", TAG+=\"uaccess\"","title":"test"},{"location":"developers/package-builds/#version-taxonomy","text":"ASL3 has adopted a new version format for individual packages related to Asterisk and the app_rpt-associated code. That format is: {ASTERISK_VERSION}+asl3-{APP_RPT_VERSION}-{PKG_RELEASE} The string ASTERISK_VERSION is the base version of Asterisk (e.g. 20.7.0). The string APP_RPT_VERSION is the version of apt_rpt and associated code, starting from 1 at the epoch of beginning packaging building. The string PKG_RELEASE is a Debian package-related package version. This will appear in the output of the asterisk -rv command and otherwise as necessary.","title":"Version Taxonomy"},{"location":"user-guide/","text":"User's Guide This is the ASL3 User's Guide. No doubt you're you've noticed the new format. Did you see the \"Next\" and \"Previous\" menu items? We think you'll find those provide an orderly way to learn about ASL3. What's New in ASL3? Ready to get on with installation? We thought so, but first consider that ASL3 is very new. You'll probably want to install on removable media or on a non-production system. For those who have used ASL2 (or other/earlier versions of ASL) you to be aware of a few important details: At the risk of repeating ourselves, ASL3 now runs on Asterisk 20! We are no longer stuck in the past. We're so proud!!! There is no update or migration path from ASL2 to ASL3 Many of the ASL3 configuration files are different The configuration files now support templates We now favor node registration using HTTP The SimpleUSB and USBRadio tune settings have been moved into their respective (.conf) configuration files. We no longer have separate per-node tune setting files. EchoLink changes EchoLink chat has been enabled EchoLink now honors the app_rpt timeout timer. A text message is sent to the client when they time out. EchoLink longer allows clients to double. A text message is sent to the client when they are doubling. ASL3 Menu Changes The ASL3 menu has been updated. Our goal is to provide an easy way for you to configure your node and to minimize the need to edit any configuration files. At the same time, we have removed most of the \"OS\" configuration options found in earlier implementations. Historically, ASL has been installed on many OS variants and the commands that work on one version do not always work on others. For our supported OS's, we will try to provide documentation for some of the commonly requested actions (e.g. changing the hostname, timezone) but we know we won't cover all topics. Fortunately, there is a lot of information available online for your system. Please let us know about any changes you have made to your configuration that would benefit others. ASL3 Configuration File Changes The first thing to know about editing configuration files is that the menus can be used to make common changes. But, if you need to edit the configurations or use the Asterisk CLI you should consider: A template is now used in rpt.conf . Editing is much easier but it's different than ASL2. Node settings are much simpler with only a few lines needed to be added/updated for each node. The ASL3 menu handles the new templated configuration. ASL registration is now set in rpt_http_registration.conf , not in iax.conf . IAX registration still works but is discouraged. Please do not configure your node for both HTTP and IAX registration. The new Asterisk CLI command is rpt show registrations . The USB configuration files now contain the tune settings. There is no tune file for each node as in ASL2. The tune menus and Asterisk CLI write to the new tune setting locations. There no need to edit or use a script to update the per node access lists, formerly known as the blacklist and whitelist. Most of this new stuff is explained with more detail in the ASL3 Configuration page. Where to Get Help and Report Bugs The AllStarLink Community is the primary support for all versions of ASL including ASL3. Please do not use the help desk for ASL technical help. To report bugs use the ASL3 GitHub repo.","title":"User's Guide"},{"location":"user-guide/#users-guide","text":"This is the ASL3 User's Guide. No doubt you're you've noticed the new format. Did you see the \"Next\" and \"Previous\" menu items? We think you'll find those provide an orderly way to learn about ASL3.","title":"User's Guide"},{"location":"user-guide/#whats-new-in-asl3","text":"Ready to get on with installation? We thought so, but first consider that ASL3 is very new. You'll probably want to install on removable media or on a non-production system. For those who have used ASL2 (or other/earlier versions of ASL) you to be aware of a few important details: At the risk of repeating ourselves, ASL3 now runs on Asterisk 20! We are no longer stuck in the past. We're so proud!!! There is no update or migration path from ASL2 to ASL3 Many of the ASL3 configuration files are different The configuration files now support templates We now favor node registration using HTTP The SimpleUSB and USBRadio tune settings have been moved into their respective (.conf) configuration files. We no longer have separate per-node tune setting files. EchoLink changes EchoLink chat has been enabled EchoLink now honors the app_rpt timeout timer. A text message is sent to the client when they time out. EchoLink longer allows clients to double. A text message is sent to the client when they are doubling.","title":"What's New in ASL3?"},{"location":"user-guide/#asl3-menu-changes","text":"The ASL3 menu has been updated. Our goal is to provide an easy way for you to configure your node and to minimize the need to edit any configuration files. At the same time, we have removed most of the \"OS\" configuration options found in earlier implementations. Historically, ASL has been installed on many OS variants and the commands that work on one version do not always work on others. For our supported OS's, we will try to provide documentation for some of the commonly requested actions (e.g. changing the hostname, timezone) but we know we won't cover all topics. Fortunately, there is a lot of information available online for your system. Please let us know about any changes you have made to your configuration that would benefit others.","title":"ASL3 Menu Changes"},{"location":"user-guide/#asl3-configuration-file-changes","text":"The first thing to know about editing configuration files is that the menus can be used to make common changes. But, if you need to edit the configurations or use the Asterisk CLI you should consider: A template is now used in rpt.conf . Editing is much easier but it's different than ASL2. Node settings are much simpler with only a few lines needed to be added/updated for each node. The ASL3 menu handles the new templated configuration. ASL registration is now set in rpt_http_registration.conf , not in iax.conf . IAX registration still works but is discouraged. Please do not configure your node for both HTTP and IAX registration. The new Asterisk CLI command is rpt show registrations . The USB configuration files now contain the tune settings. There is no tune file for each node as in ASL2. The tune menus and Asterisk CLI write to the new tune setting locations. There no need to edit or use a script to update the per node access lists, formerly known as the blacklist and whitelist. Most of this new stuff is explained with more detail in the ASL3 Configuration page.","title":"ASL3 Configuration File Changes"},{"location":"user-guide/#where-to-get-help-and-report-bugs","text":"The AllStarLink Community is the primary support for all versions of ASL including ASL3. Please do not use the help desk for ASL technical help. To report bugs use the ASL3 GitHub repo.","title":"Where to Get Help and Report Bugs"},{"location":"user-guide/commands/","text":"ASL3 New Commands New and different ASL3 commands are mentioned here. Older ASL commands are still documented on the AllStarLink Wiki app_rpt rpt show channels <node> rpt show registrations rpt show variables <node> rpt show version susb susb show settings Simple and Radio Tune Menus Helper scripts The asl-find-sound script makes it easy to identify the device strings for attached USB sound interfaces.","title":"ASL Commands"},{"location":"user-guide/commands/#asl3-new-commands","text":"New and different ASL3 commands are mentioned here. Older ASL commands are still documented on the AllStarLink Wiki","title":"ASL3 New Commands"},{"location":"user-guide/commands/#app_rpt","text":"rpt show channels <node> rpt show registrations rpt show variables <node> rpt show version","title":"app_rpt"},{"location":"user-guide/commands/#susb","text":"susb show settings","title":"susb"},{"location":"user-guide/commands/#simple-and-radio-tune-menus","text":"","title":"Simple and Radio Tune Menus"},{"location":"user-guide/commands/#helper-scripts","text":"The asl-find-sound script makes it easy to identify the device strings for attached USB sound interfaces.","title":"Helper scripts"},{"location":"user-guide/config/","text":"Configuration These configuration details are for experts and the curious who want to dig into the guts of ASL3. For others, the ASL3 Menu is most likely all you will need to set up a fully functional Allstar node. /etc/asterisk/rpt.conf The \"rpt.conf\" file remains basically the same as it was in ASL2. But, the organization has changed to make it easier to maintain, particularly for multi-node systems. As you will see, adding a new node requires the addition of just a few lines. For example adding three nodes to your system may need nothing more than: [1999](node-main) rxchannel = SimpleUSB/1999 idrecording = |iWB6NIL startup_macro = *32000 [1998](node-main) ;this node would use the ID in the template rxchannel = Radio/1998 morse = morse_1998 [1997](node-main) ;This might be a hub node if \"rxchannel = dahdi/pseudo\" is in the template This feature, available in the newer version of Asterisk, is called a \"template\". The template name for a node in \"rpt.conf\" is called \"[node-main]\". Every node tagged with \"(node-main)\" inherits all the template settings. Template settings are overwritten by nodes with \"(main-node)\" attached. The new ASL3 menu is fully aware of the templated configuration and handles adding, updating, and removing nodes. USB audio interfaces Setting up USB audio interfaces is much easier with ASL3. The USB audio interface \"tune\" settings have been moved into their respective configuration files; \"simpleusb.conf\" and \"usbradio.conf\". The separate tune files (e.g. \"simple-tune-usb1999.conf\") no longer exist. The device string is automatically found when the USB setting devstr = is empty. rxchannel=SimpleUSB/USB1999 has been changed to rxchannel=SimpleUSB/1999. Same for rxchannel=Radio/1999 for consistency with other rxchannel= settings. A new asl-find-sound script can be used to help identify the device strings for attached interfaces. The ASL3 menu and Asterisk CLI USB config commands handle these changes. HTTP Registration For ASL3, we have built an new HTTP registration module. The ASL IAX module has been replaced with the current Asterisk version of IAX2 for upstream compatibility. ASL3 menu users need not be concerned about this change. The asl3-menu makes the settings for you. For the curious and hackers out there the conf new file is rpt_http_registrations.conf . The settings are the same for IAX2 registration. While IAX registration still works, please do not register with both HTTP and IAX. That would result in unnecessary server load for no gain. The long term plan is to do away with IAX registration. HTTP registration also allows load balancing and other advantages not available with IAX. ASL has used HTTP registration since the early ASL2 betas. Back in the day when there were only 2,000 or so Allstar registered nodes Rob Vella wrote a new open source registration server in Node.js which handled both IAX and HTTP registration. At that same time Adam Paul hacked IAX2 to register with HTTP and fall back to IAX as necessary. The ASL servers are still using Rob's Node.js registration server. allowlist and denylist (previously referred to as whitelist and blacklist) Sometimes a node admin needs to allow or deny connections from specific node numbers. ASL3 provides a way to establish either an \"allowlist\" or \"denylist\" to limit access to your ndoe(s). New to ASL3 is the capability for nodes on the same server to have different lists. Unlike ASL2, no modifications or scripts are required to the configuration files and there is no need to restart or reload the server. All changes are made to the Asterisk database. As soon as you make a change it takes effect. Here we show you how to change and view the lists at the Asterisk CLI should you choose to do so. Of course these changes can easily be made from the ASL3 menu. The \"allowlist\" allows inbound connects and blocks all others. Nodes on the same server are always allowed. If any nodes are on the \"allowlist\" then the \"denylist\" is ignored. Add an allowed node at the Asterisk CLI> database put allowlist/yournode/allownode \"Our friend\" Add another node to the \"allowlist\" with database put allowlist/yournode/anothernode \"Our other friend\" The \"denylist\" prevents nodes from connecting to your node. Add a \"denylist\" if you only have a few nodes you want to block. Add a denied node at the Asterisk CLI> database put denylist/yournode/denynode \"Not our friend\" Add a another denied node at the Asterisk CLI> database put denylist/yournode/anothernode \"Not our other friend\" To see what's in the database Show entire db CLI> database show Show entire \"allowlist\" for all your nodes CLI> database show allowlist Show entire \"allowlist\" for all your one node CLI> database show allowlist/yournode Show just the one your one allowed one node CLI> database show allowlist/yournode/othernode To delete an entire \"allowlist\" At the asterisk CLI> database del allowlist To delete all allowed nodes CLI> database del allowlist/yournode Echolink Add more info here","title":"Configuration"},{"location":"user-guide/config/#configuration","text":"These configuration details are for experts and the curious who want to dig into the guts of ASL3. For others, the ASL3 Menu is most likely all you will need to set up a fully functional Allstar node.","title":"Configuration"},{"location":"user-guide/config/#etcasteriskrptconf","text":"The \"rpt.conf\" file remains basically the same as it was in ASL2. But, the organization has changed to make it easier to maintain, particularly for multi-node systems. As you will see, adding a new node requires the addition of just a few lines. For example adding three nodes to your system may need nothing more than: [1999](node-main) rxchannel = SimpleUSB/1999 idrecording = |iWB6NIL startup_macro = *32000 [1998](node-main) ;this node would use the ID in the template rxchannel = Radio/1998 morse = morse_1998 [1997](node-main) ;This might be a hub node if \"rxchannel = dahdi/pseudo\" is in the template This feature, available in the newer version of Asterisk, is called a \"template\". The template name for a node in \"rpt.conf\" is called \"[node-main]\". Every node tagged with \"(node-main)\" inherits all the template settings. Template settings are overwritten by nodes with \"(main-node)\" attached. The new ASL3 menu is fully aware of the templated configuration and handles adding, updating, and removing nodes.","title":"/etc/asterisk/rpt.conf"},{"location":"user-guide/config/#usb-audio-interfaces","text":"Setting up USB audio interfaces is much easier with ASL3. The USB audio interface \"tune\" settings have been moved into their respective configuration files; \"simpleusb.conf\" and \"usbradio.conf\". The separate tune files (e.g. \"simple-tune-usb1999.conf\") no longer exist. The device string is automatically found when the USB setting devstr = is empty. rxchannel=SimpleUSB/USB1999 has been changed to rxchannel=SimpleUSB/1999. Same for rxchannel=Radio/1999 for consistency with other rxchannel= settings. A new asl-find-sound script can be used to help identify the device strings for attached interfaces. The ASL3 menu and Asterisk CLI USB config commands handle these changes.","title":"USB audio interfaces"},{"location":"user-guide/config/#http-registration","text":"For ASL3, we have built an new HTTP registration module. The ASL IAX module has been replaced with the current Asterisk version of IAX2 for upstream compatibility. ASL3 menu users need not be concerned about this change. The asl3-menu makes the settings for you. For the curious and hackers out there the conf new file is rpt_http_registrations.conf . The settings are the same for IAX2 registration. While IAX registration still works, please do not register with both HTTP and IAX. That would result in unnecessary server load for no gain. The long term plan is to do away with IAX registration. HTTP registration also allows load balancing and other advantages not available with IAX. ASL has used HTTP registration since the early ASL2 betas. Back in the day when there were only 2,000 or so Allstar registered nodes Rob Vella wrote a new open source registration server in Node.js which handled both IAX and HTTP registration. At that same time Adam Paul hacked IAX2 to register with HTTP and fall back to IAX as necessary. The ASL servers are still using Rob's Node.js registration server.","title":"HTTP Registration"},{"location":"user-guide/config/#allowlist-and-denylist","text":"(previously referred to as whitelist and blacklist) Sometimes a node admin needs to allow or deny connections from specific node numbers. ASL3 provides a way to establish either an \"allowlist\" or \"denylist\" to limit access to your ndoe(s). New to ASL3 is the capability for nodes on the same server to have different lists. Unlike ASL2, no modifications or scripts are required to the configuration files and there is no need to restart or reload the server. All changes are made to the Asterisk database. As soon as you make a change it takes effect. Here we show you how to change and view the lists at the Asterisk CLI should you choose to do so. Of course these changes can easily be made from the ASL3 menu. The \"allowlist\" allows inbound connects and blocks all others. Nodes on the same server are always allowed. If any nodes are on the \"allowlist\" then the \"denylist\" is ignored. Add an allowed node at the Asterisk CLI> database put allowlist/yournode/allownode \"Our friend\" Add another node to the \"allowlist\" with database put allowlist/yournode/anothernode \"Our other friend\" The \"denylist\" prevents nodes from connecting to your node. Add a \"denylist\" if you only have a few nodes you want to block. Add a denied node at the Asterisk CLI> database put denylist/yournode/denynode \"Not our friend\" Add a another denied node at the Asterisk CLI> database put denylist/yournode/anothernode \"Not our other friend\" To see what's in the database Show entire db CLI> database show Show entire \"allowlist\" for all your nodes CLI> database show allowlist Show entire \"allowlist\" for all your one node CLI> database show allowlist/yournode Show just the one your one allowed one node CLI> database show allowlist/yournode/othernode To delete an entire \"allowlist\" At the asterisk CLI> database del allowlist To delete all allowed nodes CLI> database del allowlist/yournode","title":"allowlist and denylist"},{"location":"user-guide/config/#echolink","text":"Add more info here","title":"Echolink"},{"location":"user-guide/install/","text":"Install AllStarLink These instructions are for installing ASL on various computer systems. You\u2019re going to start off by installing a new Debian OS on your Raspberry Pi, PC computer, or virtual machine. You probably don't want to install a production system right away. Give yourself some time to test that everything works as you'd expect. Note: if you have installed an earlier version of ASL you need to know that ASL3 has many changes and that there's a bit of a learning curve. You will want to read the what's new page so you know what you're getting to. Raspberry Pi ASL can be installed on a Raspberry Pi 3, 4, or 5. You will install an image on a microSD card and go. This is the simplest install. For most nodes the menus will walk you through the setup. For the well-initiated with loading a Rapsberry Pi image, the image may be obtained from the ASL3 Pi Release Page . Detailed step-by-step directions for imaging and getting started can be followed at Pi Step-by-Step . Debian Linux 12 AllStarLink v3 is supported on Debian 12 Bookworm systems, and those based on Bookworm (e.g. Raspberry Pi OS). Both the x86_64/amd64 and arm64/aarch64 platforms are supported through apt/deb installation packages. Not that currently the project does not support armv7l/armhf platforms because all known use of AllStarLink is on hardware which supports the Bookworm arm64 distribution such as Rasperry Pi 3, 4, and 5. If you have aa platform must use armv7l/armhf 32-bit packages only please file an issue at ASL3 on GitHub . To install the package repositories: wget -O/tmp/asl-apt-repos_1.0-1._all.deb https://github.com/AllStarLink/asl-apt-repos/releases/download/1.0/asl-apt-repos_1.0-1._all.deb dpkg -i/tmp/asl-apt-repos_1.0-1._all.deb apt update Then the packages may be installed and updated directly from the AllStarLink package repository: apt install asl3 asl3-menu This will install the complete AllStarLink v3 system including all of the Asterisk app_rpt-enabled packages (asl3-asterisk, asl3-asterisk-config, asl3-asterisk-dev, asl3-asterisk-doc, asl3-asterisk-modules), the Dahdi kernel module (dahdi-dkms, dahdi-linux, dahdi-source) and the needed development tools to keep the kernel module updated. If the guided, menu-based configuration is not required, then do not include the asl3-menu package. It's important to note that the new packaging format will allow for easy, automated updates of kernels through the standard apt upgrade process. There is no longer any reason to hold back kernel upgrades with the ASL3 packaging. The following packages are also recommended, but not required for installation of AllStarLink v3: allmon3 - The updated web interface to AllStarLink which includes strong support for mobile devices and screens of all sizes and shapes. asl3-update-nodelist - And updated node service to maintain a local database copy of the AllStarLink node database. While, in general, the preferred method of node lookup is DNS, some installations with slow Internet or DNS servers that have very long cache timers may benefit from this method of node lookup instead. From Source Source install is for developers or users who need to install AllStarLink 3 on unsupported hardware or operating systems. Installing ASL from source code is primarily for developers. Doing so will require you to download, compile, and install multiple projects. You will also need to be very comfortable using various development tools and the Linux CLI. The following instructions are for building ONLY Asterisk with ASL's app_rpt. Source install does not include any helpers, Allmon3, asl3-menu, asl3-nodelist, etc. Installs and runs Asterisk as root Install phreaknet.sh script The phreaknet script compiles and patches Asterisk and DAHDI. cd /usr/src && wget https://docs.phreaknet.org/script/phreaknet.sh && chmod +x phreaknet.sh && ./phreaknet.sh make Install Asterisk 20 LTS Use -t or -b for developer mode. Both are optional. The -t is for backtraces and thread debug. Thread debugging is resource intensive. Use -b for backtraces only, recommended on 386 or for submitting core dumps. The -s is for sip if you need it still, leave off the -s if you don\u2019t The -d is for DAHDI and is required The -v is to install the latest of the major version specified, 20 in this case Use -f to force a reinstall (upgrade) phreaknet install -d -b -v 20 Asterisk should be running at this point but not app_rpt. Check the install with asterisk -r . Clone ASL3 repo cd /usr/src git clone https://github.com/AllStarLink/app_rpt.git Install ASL3 This script does a git pull of app_rpt and compiles the branch you are on. cd app_rpt ./rpt_install.sh Install ASL3 configs This adds ASL3 configs to the full set of Asterisk configuration files. ASL3 modules.conf limits what actually runs. cp /usr/src/app_rpt/configs/rpt/* /etc/asterisk reboot the system You should now have a complete ASL3 install. asterisk -rx \"rpt localnodes\" You should see node 1999. Windows ASL will not install natively on Windows. Docker There is not currently a Docker install from ASL.","title":"Installation"},{"location":"user-guide/install/#install-allstarlink","text":"These instructions are for installing ASL on various computer systems. You\u2019re going to start off by installing a new Debian OS on your Raspberry Pi, PC computer, or virtual machine. You probably don't want to install a production system right away. Give yourself some time to test that everything works as you'd expect. Note: if you have installed an earlier version of ASL you need to know that ASL3 has many changes and that there's a bit of a learning curve. You will want to read the what's new page so you know what you're getting to.","title":"Install AllStarLink"},{"location":"user-guide/install/#raspberry-pi","text":"ASL can be installed on a Raspberry Pi 3, 4, or 5. You will install an image on a microSD card and go. This is the simplest install. For most nodes the menus will walk you through the setup. For the well-initiated with loading a Rapsberry Pi image, the image may be obtained from the ASL3 Pi Release Page . Detailed step-by-step directions for imaging and getting started can be followed at Pi Step-by-Step .","title":"Raspberry Pi"},{"location":"user-guide/install/#debian-linux-12","text":"AllStarLink v3 is supported on Debian 12 Bookworm systems, and those based on Bookworm (e.g. Raspberry Pi OS). Both the x86_64/amd64 and arm64/aarch64 platforms are supported through apt/deb installation packages. Not that currently the project does not support armv7l/armhf platforms because all known use of AllStarLink is on hardware which supports the Bookworm arm64 distribution such as Rasperry Pi 3, 4, and 5. If you have aa platform must use armv7l/armhf 32-bit packages only please file an issue at ASL3 on GitHub . To install the package repositories: wget -O/tmp/asl-apt-repos_1.0-1._all.deb https://github.com/AllStarLink/asl-apt-repos/releases/download/1.0/asl-apt-repos_1.0-1._all.deb dpkg -i/tmp/asl-apt-repos_1.0-1._all.deb apt update Then the packages may be installed and updated directly from the AllStarLink package repository: apt install asl3 asl3-menu This will install the complete AllStarLink v3 system including all of the Asterisk app_rpt-enabled packages (asl3-asterisk, asl3-asterisk-config, asl3-asterisk-dev, asl3-asterisk-doc, asl3-asterisk-modules), the Dahdi kernel module (dahdi-dkms, dahdi-linux, dahdi-source) and the needed development tools to keep the kernel module updated. If the guided, menu-based configuration is not required, then do not include the asl3-menu package. It's important to note that the new packaging format will allow for easy, automated updates of kernels through the standard apt upgrade process. There is no longer any reason to hold back kernel upgrades with the ASL3 packaging. The following packages are also recommended, but not required for installation of AllStarLink v3: allmon3 - The updated web interface to AllStarLink which includes strong support for mobile devices and screens of all sizes and shapes. asl3-update-nodelist - And updated node service to maintain a local database copy of the AllStarLink node database. While, in general, the preferred method of node lookup is DNS, some installations with slow Internet or DNS servers that have very long cache timers may benefit from this method of node lookup instead.","title":"Debian Linux 12"},{"location":"user-guide/install/#from-source","text":"Source install is for developers or users who need to install AllStarLink 3 on unsupported hardware or operating systems. Installing ASL from source code is primarily for developers. Doing so will require you to download, compile, and install multiple projects. You will also need to be very comfortable using various development tools and the Linux CLI. The following instructions are for building ONLY Asterisk with ASL's app_rpt. Source install does not include any helpers, Allmon3, asl3-menu, asl3-nodelist, etc. Installs and runs Asterisk as root","title":"From Source"},{"location":"user-guide/install/#install-phreaknetsh-script","text":"The phreaknet script compiles and patches Asterisk and DAHDI. cd /usr/src && wget https://docs.phreaknet.org/script/phreaknet.sh && chmod +x phreaknet.sh && ./phreaknet.sh make","title":"Install phreaknet.sh script"},{"location":"user-guide/install/#install-asterisk-20-lts","text":"Use -t or -b for developer mode. Both are optional. The -t is for backtraces and thread debug. Thread debugging is resource intensive. Use -b for backtraces only, recommended on 386 or for submitting core dumps. The -s is for sip if you need it still, leave off the -s if you don\u2019t The -d is for DAHDI and is required The -v is to install the latest of the major version specified, 20 in this case Use -f to force a reinstall (upgrade) phreaknet install -d -b -v 20 Asterisk should be running at this point but not app_rpt. Check the install with asterisk -r .","title":"Install Asterisk 20 LTS"},{"location":"user-guide/install/#clone-asl3-repo","text":"cd /usr/src git clone https://github.com/AllStarLink/app_rpt.git","title":"Clone ASL3 repo"},{"location":"user-guide/install/#install-asl3","text":"This script does a git pull of app_rpt and compiles the branch you are on. cd app_rpt ./rpt_install.sh","title":"Install ASL3"},{"location":"user-guide/install/#install-asl3-configs","text":"This adds ASL3 configs to the full set of Asterisk configuration files. ASL3 modules.conf limits what actually runs. cp /usr/src/app_rpt/configs/rpt/* /etc/asterisk reboot the system You should now have a complete ASL3 install. asterisk -rx \"rpt localnodes\" You should see node 1999.","title":"Install ASL3 configs"},{"location":"user-guide/install/#windows","text":"ASL will not install natively on Windows.","title":"Windows"},{"location":"user-guide/install/#docker","text":"There is not currently a Docker install from ASL.","title":"Docker"},{"location":"user-guide/menu/","text":"ASL3 Menu Once you have installed ASL3 on your system you will want to configure your node. The ASL3 menu will help you get started with many common configurations including nodes with USB audio interfaces and \"hub\" nodes. The ASL3 menu will also help you maintain your system. Your system may have been setup to automatically start the ASL3 menu as soon as you have logged in. If not, you can access the ASL3 menu by executing the following command from the Linux shell : asl-menu Note: if you are not logged in as the \"root\" user you will need to use sudo asl-menu . When the ASL3 menu is running you will be presented with options to configure a node, access the Asterisk CLI, backup (or restore) your ASL settings, access the Linux CLI, perform some basic diagnostics, and perform some common system actions. Node settings For new installs you will want to select the ASL3 \"Node Settings\" menu option. This is where you will configure the basic settings needed to get your new node on the air. You can return to this menu later to review and/or update your node settings. The \"Node Settings\" menu allows you update key node settings including : Node number Node password Node Callsign/ID Radio interface (e.g. USB sound device, HUB node) Duplex type (e.g. full duplex, half duplex, telemetry) USB Interface tuning Enable/disable status posting (to http://stats.allstarlink.org ) The \"Node Settings\" menu also allows you to add (or remove) additional nodes. Note: you can also use the node-setup command to access this menu. Asterisk CLI The Asterisk CLI provides direct access to the heart of what makes an AllStar node. You might use the CLI for testing, troubleshooting, or for controlling your node. You should know that many of the commands require a more in-depth knowledge of Asterisk. The good news is that many of the commonly used commands can be executed from the \"Diagnostics Menu\" or with one of the web management/monitoring applications (e.g. Allmon, Supermon). Backup and Restore The ASL3 \"Backup and Restore\" menu option provides a simple option to backup (and restore) your AllStar and Asterisk configuration. The backup archives are stored locally on your system and optionally in the cloud. We encourage you to \"backup\" your configuration, especially before and after you make changes. Note: you can also use the asl-backup-menu command to access this menu. Diagnostics The ASL3 \"Diagnostics\" menu option allows you to perform some simple/rudimentary checks of your system and node. These include basic internet connectivity checks and reporting of your AllStar registrations. We also provide a way to stop, start, and restart some of the AllStar and Asterisk services that run on your system. Note: you should know that these diagnostics are not exhaustive. With a good connection to the internet and a valid configuration all \"should be\" OK. If the provided diagnostics don't flag an issue then you will need to dig deeper. Be aware of changes you make to your system and configuration. Be aware of software packages that you install. Be aware of \"upgrades\". If you need help, reach out to the AllStarLink Community. Expert Configuration The ASL3 \"Expert Configuration Menu\" option will allow you to make changes to some of the AllStar and Asterisk configuration files (in the \"/etc/asterisk\" directory). But, don't worry about that advanced stuff just yet. Bash shell The \"bash\" shell provides access to the Linux command line interface, also known as the Linux CLI. This is for experts or if you have been provided with CLI instructions.","title":"ASL Menu"},{"location":"user-guide/menu/#asl3-menu","text":"Once you have installed ASL3 on your system you will want to configure your node. The ASL3 menu will help you get started with many common configurations including nodes with USB audio interfaces and \"hub\" nodes. The ASL3 menu will also help you maintain your system. Your system may have been setup to automatically start the ASL3 menu as soon as you have logged in. If not, you can access the ASL3 menu by executing the following command from the Linux shell : asl-menu Note: if you are not logged in as the \"root\" user you will need to use sudo asl-menu . When the ASL3 menu is running you will be presented with options to configure a node, access the Asterisk CLI, backup (or restore) your ASL settings, access the Linux CLI, perform some basic diagnostics, and perform some common system actions.","title":"ASL3 Menu"},{"location":"user-guide/menu/#node-settings","text":"For new installs you will want to select the ASL3 \"Node Settings\" menu option. This is where you will configure the basic settings needed to get your new node on the air. You can return to this menu later to review and/or update your node settings. The \"Node Settings\" menu allows you update key node settings including : Node number Node password Node Callsign/ID Radio interface (e.g. USB sound device, HUB node) Duplex type (e.g. full duplex, half duplex, telemetry) USB Interface tuning Enable/disable status posting (to http://stats.allstarlink.org ) The \"Node Settings\" menu also allows you to add (or remove) additional nodes. Note: you can also use the node-setup command to access this menu.","title":"Node settings"},{"location":"user-guide/menu/#asterisk-cli","text":"The Asterisk CLI provides direct access to the heart of what makes an AllStar node. You might use the CLI for testing, troubleshooting, or for controlling your node. You should know that many of the commands require a more in-depth knowledge of Asterisk. The good news is that many of the commonly used commands can be executed from the \"Diagnostics Menu\" or with one of the web management/monitoring applications (e.g. Allmon, Supermon).","title":"Asterisk CLI"},{"location":"user-guide/menu/#backup-and-restore","text":"The ASL3 \"Backup and Restore\" menu option provides a simple option to backup (and restore) your AllStar and Asterisk configuration. The backup archives are stored locally on your system and optionally in the cloud. We encourage you to \"backup\" your configuration, especially before and after you make changes. Note: you can also use the asl-backup-menu command to access this menu.","title":"Backup and Restore"},{"location":"user-guide/menu/#diagnostics","text":"The ASL3 \"Diagnostics\" menu option allows you to perform some simple/rudimentary checks of your system and node. These include basic internet connectivity checks and reporting of your AllStar registrations. We also provide a way to stop, start, and restart some of the AllStar and Asterisk services that run on your system. Note: you should know that these diagnostics are not exhaustive. With a good connection to the internet and a valid configuration all \"should be\" OK. If the provided diagnostics don't flag an issue then you will need to dig deeper. Be aware of changes you make to your system and configuration. Be aware of software packages that you install. Be aware of \"upgrades\". If you need help, reach out to the AllStarLink Community.","title":"Diagnostics"},{"location":"user-guide/menu/#expert-configuration","text":"The ASL3 \"Expert Configuration Menu\" option will allow you to make changes to some of the AllStar and Asterisk configuration files (in the \"/etc/asterisk\" directory). But, don't worry about that advanced stuff just yet.","title":"Expert Configuration"},{"location":"user-guide/menu/#bash-shell","text":"The \"bash\" shell provides access to the Linux command line interface, also known as the Linux CLI. This is for experts or if you have been provided with CLI instructions.","title":"Bash shell"},{"location":"user-guide/pi-detailed/","text":"Step-by-Step Pi Appliance Setup If you do not already have it installed, install the Raspberry Pi Imager . FIX FIXIMG Download the latest release image . This will be named firefly-logger-X.Y-aarch64.img.xz where \"X.Y\" is the version. Save it to the local Downloads directory. Launch Raspberry Pi Imager from the start menu. Click on CHOOSE DEVICE and choose the type of Pi hardware on which Firefly Logger is being installed. Click on CHOOSE OS . Scroll to the bottom of the list that appears and select Use custom . FIX FIXIMG A Select image dialog box will appear. Navigate to the Downloads folder and select the image downloaded in step 2. It will be named something like firefly-logger-5.1-aarch64.img.xz. Then click Open . Connect the SD card or the SD card in a USB adapter to the computer. Then click on CHOOSE STORAGE . An option will be presented named something such as \"Mass Storage Device USB Device - 16.0 GB\". Click on that entry. Click NEXT A box labelled \"Use OS customisation?\" will appear. Click on EDIT SETTINGS FIX FIXIMG Check the box next to Configure wireless LAN and then enter the name of the wireless network in SSID and the password for that network in Password . Change the \"Wireless LAN country\" to US or other country as appropriate. This is not necessary if the Pi will use a network cable rather than wireless. (Optional) Check the box next to Set locale settings and change the \"Time zone\" to the desired region. Click SAVE in \"OS Customsation\". Click YES for \"Use OS customisation?\" FIXIMG Click YES to continue to write the image to the SD card. Depending on the speed of the computer and the type of SD card one will have time for a beverage of their choice. When the write is complete, remove the card from computer and insert it into the Pi. If using a USB adapter for the SD card, remove the SD card from the adapter and insert the card into the Pi. The Pi will not us the SD card in the USB adapter. Power on the Pi. Wait approximately 2 minutes for the Pi to boot and perform the various firstboot tasks. FIX FIXIMG (Optional) Network connectivity may be tested using the command ping -4 firefly.local from a command prompt or PowerShell window.","title":"Pi Step-by-Step"},{"location":"user-guide/pi-detailed/#step-by-step-pi-appliance-setup","text":"If you do not already have it installed, install the Raspberry Pi Imager . FIX FIXIMG Download the latest release image . This will be named firefly-logger-X.Y-aarch64.img.xz where \"X.Y\" is the version. Save it to the local Downloads directory. Launch Raspberry Pi Imager from the start menu. Click on CHOOSE DEVICE and choose the type of Pi hardware on which Firefly Logger is being installed. Click on CHOOSE OS . Scroll to the bottom of the list that appears and select Use custom . FIX FIXIMG A Select image dialog box will appear. Navigate to the Downloads folder and select the image downloaded in step 2. It will be named something like firefly-logger-5.1-aarch64.img.xz. Then click Open . Connect the SD card or the SD card in a USB adapter to the computer. Then click on CHOOSE STORAGE . An option will be presented named something such as \"Mass Storage Device USB Device - 16.0 GB\". Click on that entry. Click NEXT A box labelled \"Use OS customisation?\" will appear. Click on EDIT SETTINGS FIX FIXIMG Check the box next to Configure wireless LAN and then enter the name of the wireless network in SSID and the password for that network in Password . Change the \"Wireless LAN country\" to US or other country as appropriate. This is not necessary if the Pi will use a network cable rather than wireless. (Optional) Check the box next to Set locale settings and change the \"Time zone\" to the desired region. Click SAVE in \"OS Customsation\". Click YES for \"Use OS customisation?\" FIXIMG Click YES to continue to write the image to the SD card. Depending on the speed of the computer and the type of SD card one will have time for a beverage of their choice. When the write is complete, remove the card from computer and insert it into the Pi. If using a USB adapter for the SD card, remove the SD card from the adapter and insert the card into the Pi. The Pi will not us the SD card in the USB adapter. Power on the Pi. Wait approximately 2 minutes for the Pi to boot and perform the various firstboot tasks. FIX FIXIMG (Optional) Network connectivity may be tested using the command ping -4 firefly.local from a command prompt or PowerShell window.","title":"Step-by-Step Pi Appliance Setup"}]}